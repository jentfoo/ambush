apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

repositories {
  mavenCentral()
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
}

dependencies {
  testImplementation (
    "junit:junit:4.13",
    "org.threadly:threadly-test:1.0"
  )

  implementation (
    "org.threadly:threadly:6.0"
  )
}

compileJava {
  options.compilerArgs << "-Xlint:all"// << "-Werror"
}

compileTestJava {
  options.compilerArgs << "-Xlint:all" << "-Werror"
}

plugins.withType(JavaPlugin) {
  checkstyle.sourceSets = [sourceSets.main]
}

test {
  maxParallelForks = Math.min(8, Math.max(1, (int)(Runtime.getRuntime().availableProcessors() / 2)))
  jacoco {
    excludes = ['**/package-info**','**/*Test']
    destinationFile = file("$buildDir/reports/jacoco/test.exec")
  }
  getReports().getJunitXml().setDestination(file("$buildDir/reports/tests/xml"))
  getReports().getHtml().setDestination(file("$buildDir/reports/tests/html"))
  setBinResultsDir(file("$buildDir/reports/tests/bin"))
}

build.dependsOn jacocoTestReport

jacocoTestReport {
  reports {
    csv.enabled = false
    xml.enabled = true
    xml.destination = file("$buildDir/reports/jacoco/jacoco.xml")
    html.enabled = true
    html.destination = file("$buildDir/reports/jacoco/html")
  }
  doLast {
    println "Test results available at:"
    println "html - $buildDir/reports/tests/html/index.html"
    println "Test coverage reports available at:"
    println "html - $buildDir/reports/jacoco/html/index.html"
  }
}

jar {
  manifest {
    attributes (
      'Implementation-Title': 'Ambush', 
      'Implementation-Version': archiveVersion
    )
  }
}

javadoc {
  source = sourceSets.main.allJava
  options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}
