apply from: 'build.shared'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

test {
  maxParallelForks = Math.max(1, (int)(Runtime.getRuntime().availableProcessors() / 2))
}

compileJava {
  String[] java8Paths = new String[8]
  java8Paths[0] = "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar"
  java8Paths[1] = "/usr/lib/jvm/java-8-openjdk/jre/lib/rt.jar"
  java8Paths[2] = "/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/rt.jar"
  java8Paths[3] = "/usr/lib/jvm/java-1.8.0-openjdk/jre/lib/rt.jar"
  java8Paths[4] = "/usr/lib/jvm/java-8-sun/jre/lib/rt.jar"
  java8Paths[5] = "/usr/lib/jvm/jdk1.8.0_65/jre/lib/rt.jar"
  java8Paths[6] = "/usr/lib/jvm/jdk1.8.0_45/jre/lib/rt.jar"
  java8Paths[7] = "/usr/lib/jvm/jdk1.8.0_20/jre/lib/rt.jar"
  for (String path : java8Paths) {
    if (new java.io.File(path).exists()) {
      println 'Using java 8 rt.jar: ' + path
      options.bootClasspath = path
      break
    }
  }
  if (options.bootClasspath == null) {
    println 'Unable to find java 6 rt.jar, will cause failure so exiting now'
    println ''
    System.exit(1)
  }
}

compileTestJava {
  options.compilerArgs << "-Xlint:all" << "-Xlint:-deprecation" << "-Werror"

  String[] java8Paths = new String[8]
  java8Paths[0] = "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar"
  java8Paths[1] = "/usr/lib/jvm/java-8-openjdk/jre/lib/rt.jar"
  java8Paths[2] = "/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/rt.jar"
  java8Paths[3] = "/usr/lib/jvm/java-1.8.0-openjdk/jre/lib/rt.jar"
  java8Paths[4] = "/usr/lib/jvm/java-8-sun/jre/lib/rt.jar"
  java8Paths[5] = "/usr/lib/jvm/jdk1.8.0_65/jre/lib/rt.jar"
  java8Paths[6] = "/usr/lib/jvm/jdk1.8.0_45/jre/lib/rt.jar"
  java8Paths[7] = "/usr/lib/jvm/jdk1.8.0_20/jre/lib/rt.jar"
  for (String path : java8Paths) {
    if (new java.io.File(path).exists()) {
      options.bootClasspath = path
      break
    }
  }
}

signing {
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment {
        MavenDeployment deployment -> signing.signPom(deployment)
      }
 
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }
 
      pom.project {
        name 'Ambush'
        packaging 'jar'
        description 'A unique java library for structuring and driving performance load tests.  What makes this so unique is the belief that what is describing how test code runs, should be the same language/closely connected with the tool which helps structure those actions and executes those actions.'
        url 'http://threadly.org/'
 
        scm {
          url 'scm:git@github.com:threadly/ambush.git'
          connection 'scm:git@github.com:threadly/ambush.git'
          developerConnection 'scm:git@github.com:threadly/ambush.git'
        }
 
        licenses {
          license {
            name 'Mozilla Public License Version 2.0'
            url 'https://www.mozilla.org/MPL/2.0/'
            distribution 'repo'
          }
        }
 
        developers {
          developer {
            id 'jent'
            name 'Mike Jensen'
            email 'jent@threadly.org'
          }
        }
      }
    }
  }
}
